{"version":3,"sources":["reactComponents/slideShow/slide-modal/bull.js","reactComponents/globalComponents/liArray.js","reactComponents/slideShow/slide-modal/modal-slideshow.js","reactComponents/globalComponents/media.js","reactComponents/slideShow/portfolio-slideshow.js","reactComponents/experienceWorkEdu/portfolio-workExp.js","serviceWorker.js","index.js"],"names":["Bull","handleClick","props","onClick","index","animCircle","offset","this","timeRemain","isActive","className","cx","cy","r","fill","stroke","strokeDasharray","strokeDashoffset","transform","width","height","React","Component","LiArray","class","Array","from","length","list","_","key","Modal","setAppElement","ModalSlideshow","state","modalIsOpen","openModal","bind","afterOpenModal","closeModal","setState","subtitle","style","color","followProj","projData","link","href","target","isOpen","onAfterOpen","clearTimer","onRequestClose","onAfterClose","startTimer","ModalStyle","contentLabel","overlayClassName","ref","name","skills","src","image","alt","detaildesc","split","map","item","Media","activeVideo","vidActive","preProps","imgSrc","imgVid","vidSrc","imgAlt","onPlay","onPause","autoPlay","muted","controls","type","Slideshow","timestamp","Date","getTime","duration","timerStep","start","intervalStart","runtime","progress","Math","min","requestAnimationFrame","changeSlide","id","idMax","activeIndex","prev","navBullClick","resetTimer","navPrevSlide","navNextSlide","clearInterval","intervalId","setInterval","projects","fetch","then","response","json","responseJson","currentProject","video","desc","port_work","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c4fb692.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bull.css'\r\n\r\nclass Bull extends React.Component {\r\n    handleClick = () => this.props.onClick(this.props.index);\r\n\r\n    render(){\r\n        var offset = (this.props.timeRemain/ (10000/134));\r\n\r\n        let animCircle;\r\n\r\n        if(this.props.isActive){\r\n            animCircle = <circle className = \"stroke-bullet nav-bullet\" cx=\"20\" cy=\"20\" r=\"18\" fill=\"none\" stroke=\"#f77a52\" strokeDasharray=\"134\" strokeDashoffset = {20 + offset} transform= \"rotate(-90, 20,20)\"></circle>\r\n        }\r\n\r\n        return(\r\n            <svg className = {this.props.isActive ? 'bull-active' : 'bull-inactive'} onClick = {this.handleClick} width=\"40\" height=\"40\">\r\n\t\t        <circle className = \"inner-bullet nav-bullet\" cx=\"20\" cy=\"20\" r=\"18\" stroke=\"#e6e6e6\" ></circle>\r\n\t\t        {animCircle}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Bull;\r\n","import React from 'react';\r\n\r\nclass LiArray extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n        <ul className = {this.props.class}>\r\n            {Array.from({\r\n                length: this.props.list.length},\r\n                (_, index) => (\r\n                    <li key = {index}>&bull; {this.props.list[index]}</li>\r\n                )\r\n            )}\r\n        </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LiArray;","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport ModalStyle from './modal-slideshow.css';\r\nimport LiArray from '../../globalComponents/liArray';\r\n \r\nModal.setAppElement('body');\r\n\r\n\r\nclass ModalSlideshow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n \r\n    this.state = {\r\n      modalIsOpen: false\r\n    };\r\n \r\n    this.openModal = this.openModal.bind(this);\r\n    this.afterOpenModal = this.afterOpenModal.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n  }\r\n \r\n  openModal() {\r\n    this.setState({\r\n        modalIsOpen: true,\r\n    });\r\n  }\r\n \r\n  afterOpenModal() {\r\n    this.subtitle.style.color = '#f00';\r\n  }\r\n \r\n  closeModal() {\r\n    this.setState({modalIsOpen: false});\r\n  }\r\n \r\n  render() {\r\n      let followProj;\r\n\r\n      if(this.props.projData.link !== null){\r\n          followProj = <a className = \"btn\" href = {this.props.projData.link} target = \"blank\">View this porject</a>;\r\n      }else{\r\n          followProj = null;\r\n      }\r\n    return (\r\n      <div  className = \"modal-open\">\r\n        <button className = \"btn modal-open\" onClick={this.openModal}>Read More</button>\r\n        <Modal\r\n          isOpen={this.state.modalIsOpen}\r\n          onAfterOpen={this.props.clearTimer}\r\n          onRequestClose={this.closeModal}\r\n          onAfterClose={this.props.startTimer}\r\n          style={ModalStyle}\r\n          contentLabel=\"Projects Details\"\r\n          className = \"modal-body\"\r\n          overlayClassName = \"modal-overlay\"\r\n        >\r\n        <div className = \"modal-content-grid\">\r\n          <h2 className = \"modal-head\" ref={subtitle => this.subtitle = subtitle}>{this.props.projData.name}</h2>\r\n          <LiArray class = \"modal-skill\" list = {this.props.projData.skills}></LiArray>\r\n          <img className = \"modal-img\" src = {this.props.projData.image.src} alt = {this.props.projData.image.alt}></img>\r\n          <p className = \"modal-text\">{this.props.projData.detaildesc.split('\\n').map(function(item, key) {\r\n            return (\r\n              <span key={key}>\r\n                &emsp;\r\n                {item}\r\n                <br/>\r\n                <br/>\r\n              </span>\r\n            )\r\n           })}\r\n          </p>\r\n          <div>{followProj}</div>\r\n          <button className = \"btn modal-close\" onClick={this.closeModal}>Close</button>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default ModalSlideshow;","import React from 'react';\r\nimport './mediaComp.css'\r\n\r\nclass Media extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            vidActive: false\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(preProps){\r\n        if(this.props.imgSrc !== preProps.imgSrc){\r\n            this.setState({\r\n                vidActive: false\r\n            });\r\n        }\r\n    }\r\n\r\n    activeVideo = () =>{\r\n        this.setState({\r\n            vidActive: true\r\n        });\r\n    }\r\n\r\n    render(){\r\n        let imgVid;\r\n        if(this.props.vidSrc != null){\r\n            if(this.state.vidActive === false){\r\n                imgVid = \r\n                <div className = \"mediaComp-container\" onClick = {this.activeVideo}>\r\n                    <img className = \"mediaComp-img\" src = {this.props.imgSrc} alt = {this.props.imgAlt}></img>\r\n                    <div className = \"mediaComp-overlay\">\r\n                        <img className = \"mediaComp-playBtn\" src = \"./imgs/globalMedia/play.svg\" alt = \"Play Icon\"></img>\r\n                    </div>\r\n                </div>\r\n            } else {\r\n                imgVid = \r\n                <video className = \"mediaComp-video\" onPlay = {this.props.clearTimer} onPause = {this.props.startTimer} autoPlay muted controls>\r\n                    <source src = {this.props.vidSrc} type = \"video/mp4\"></source>\r\n                </video>;\r\n            }\r\n\r\n        } else {\r\n            imgVid = <img className = \"mediaComp-img\" src = {this.props.imgSrc} alt = {this.props.imgAlt}></img>;\r\n        }\r\n        return(\r\n            <div className = {this.props.class}>{imgVid}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Media;","import React from 'react';\r\nimport './port-slide.css';\r\nimport Bull from './slide-modal/bull';\r\nimport ModalSlideshow from './slide-modal/modal-slideshow';\r\nimport LiArray from '../globalComponents/liArray';\r\nimport Media from '../globalComponents/media';\r\n\r\nclass Slideshow extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            projects: [{\"name\": \"temp project\",\r\n            \"image\": {\r\n                \"src\": \"imgs/testImg.jpg\",\r\n                \"alt\": \"temp Image 1\"},\r\n            \"desc\": \"Lorem Ipsum\",\r\n            \"skills\":[\"temp 1\", \"temp 2\", \"temp 3\"],\r\n            \"detaildesc\":\"temp\"}],\r\n            id: 0,\r\n            idMax: null,\r\n            intervalId: null,\r\n            intervalStart: null,\r\n            timerStep: 10000,\r\n            timeRemain: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://pedrokrieckaert.github.io/data/slideShow.json')\r\n        //fetch('./data/slideShow.json')\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((responseJson) => {\r\n                this.setState({\r\n                    projects: responseJson.projects,\r\n                    idMax: responseJson.projects.length,\r\n                    activeIndex: 0\r\n                });\r\n            });\r\n\r\n\r\n            var intervalId = setInterval(this.changeSlide, this.state.timerStep);\r\n            this.setState({intervalId: intervalId});\r\n            requestAnimationFrame(() =>{\r\n                this.setState({intervalStart: new Date().getTime()});\r\n                this.timeRemain();\r\n            });\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.state.intervalId);\r\n    }\r\n\r\n    timeRemain = (timestamp) => {\r\n        var timestamp = timestamp || new Date().getTime();\r\n        var duration = this.state.timerStep;\r\n        var start = this.state.intervalStart;\r\n        var runtime = timestamp - start;\r\n        var progress = runtime / duration;\r\n        progress = Math.min(progress, 1);\r\n\r\n        if (runtime < duration){\r\n            requestAnimationFrame( (timestamp) =>{\r\n                this.timeRemain(timestamp);\r\n            });\r\n        }\r\n        requestAnimationFrame(() =>{\r\n            this.setState({\r\n                timeRemain: duration - ( (new Date().getTime() - start))\r\n            });\r\n        });\r\n    }\r\n\r\n    //Slideshow auto present\r\n    changeSlide = () => {\r\n        if (this.state.id === this.state.idMax - 1){\r\n            this.setState({id: 0});\r\n            this.setState({activeIndex: 0});\r\n        } else {\r\n            this.setState(prev => {\r\n                return {\r\n                    id: prev.id + 1,\r\n                    activeIndex: prev.activeIndex + 1\r\n                };\r\n            });\r\n        }\r\n        this.setState({intervalStart: (new Date()).getTime()});\r\n    }\r\n\r\n    //Slideshow Navigation\r\n    navBullClick = (index) => {\r\n        this.setState({\r\n            activeIndex: index,\r\n            id: index\r\n        });\r\n\r\n        //Reset auto show timer\r\n        this.resetTimer();\r\n    }\r\n\r\n    navPrevSlide = () => {\r\n        if(this.state.id === 0){\r\n            this.setState({\r\n                id: this.state.idMax - 1,\r\n                activeIndex: this.state.idMax - 1\r\n            })\r\n        }else{\r\n            this.setState(prev =>{\r\n                return{\r\n                    id: prev.id - 1,\r\n                    activeIndex: prev.activeIndex -1\r\n                };\r\n            });\r\n        }\r\n\r\n        //Reset auto show timer\r\n        this.resetTimer();\r\n    }\r\n\r\n    navNextSlide = () => {\r\n        if(this.state.id === this.state.idMax - 1){\r\n            this.setState({\r\n                id: 0,\r\n                activeIndex: 0\r\n            })\r\n        }else{\r\n            this.setState(prev =>{\r\n                return{\r\n                    id: prev.id + 1,\r\n                    activeIndex: prev.activeIndex + 1\r\n                };\r\n            });\r\n        }\r\n\r\n        //Reset auto show timer\r\n        this.resetTimer();\r\n    }\r\n\r\n    //Handles the slideshow timer for modal content\r\n    clearTimer = () => {\r\n        clearInterval(this.state.intervalId);\r\n    }\r\n\r\n    startTimer = () =>{\r\n        var intervalId = setInterval(this.changeSlide, this.state.timerStep);\r\n        this.setState({intervalStart: (new Date()).getTime()});\r\n        this.setState({intervalId: intervalId}); \r\n    }\r\n\r\n    resetTimer = () =>{\r\n        clearInterval(this.state.intervalId);\r\n        var intervalId = setInterval(this.changeSlide, this.state.timerStep);\r\n        this.setState({intervalStart: (new Date()).getTime()});\r\n        this.setState({intervalId: intervalId});\r\n    }\r\n\r\n    render() {\r\n        var currentProject = this.state.projects[this.state.id];\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"content-grid\">\r\n                    <div className = \"content-head\">\r\n                        <h2>Portfolio</h2>\r\n                    </div>\r\n                    <div className = \"content-navOverlay\">\r\n                        <div className = \"content-slide\">\r\n                            <Media class = \"slide-img\" imgAlt = {currentProject.image.alt} imgSrc = {currentProject.image.src} vidSrc = {currentProject.video} clearTimer = {this.clearTimer} startTimer = {this.startTimer}></Media>\r\n                            <h3 className = \"slide-head\">{currentProject.name}</h3>\r\n                            <p className = \"slide-desc\">{currentProject.desc}</p>\r\n                            <LiArray class = \"slide-skill\" list = {currentProject.skills}></LiArray>\r\n                        </div>\r\n                        <img src = \"./imgs/globalMedia/next.svg\" alt = \"next/prev button\" className = \"nav-btn\" id = \"next\" onClick = {this.navNextSlide}></img>\r\n                        <img src = \"./imgs/globalMedia/next.svg\" alt = \"next/prev button\" className = \"nav-btn\" id = \"prev\" onClick = {this.navPrevSlide}></img>\r\n                    </div>\r\n                </div>\r\n                <ModalSlideshow projData = {currentProject} clearTimer = {this.clearTimer} startTimer = {this.startTimer}/>\r\n                <div className = \"content-nav\">\r\n                        {Array.from({\r\n                            length: this.state.idMax},\r\n                            (_, index) => (\r\n                                <Bull index = {index} key = {index} isActive = {this.state.activeIndex === index} onClick = {this.navBullClick} timeRemain = {this.state.timeRemain}/>\r\n                            )\r\n                        )}\r\n                    </div>\r\n            </div>\r\n\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default Slideshow;","import React from 'react';\r\nimport './expWorkEdu.css'\r\n\r\nfunction port_work(){\r\n    return (\r\n            <div>\r\n                <div className = \"content-head\">\r\n                    <h3>Experience</h3>\r\n                </div>\r\n                <div className = \"content-exp\">\r\n                    <div className = \"edu-container\">\r\n                        <h3 className = \"edu-head\">Education</h3>\r\n                        <p>Post Elementary Schooling, International Baccalaureate (IB) program</p>\r\n                        <ul className = \"edu-list\"> \r\n                            <li>2009-2012: Mont Kiara International School, Kuala Lumpur, Malaysia</li>\r\n                            <li>2012-2015: Stonehill International School, Bangalore, India</li>\r\n                            <li>2015 - 2017: International School of The Hague, Netherlands</li>\r\n                            <li>2018 - 2019: Hanze University of Applied Sciences, Groningen, Netherlands</li>\r\n                            <li>2019 - present: The Hague University of Applied Sciences, The Hague, Netherlands</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className = \"work-container\">\r\n                        <h3 className = \"work-head\">Work Experience</h3>\r\n                        <p className = \"work-list\">None so far, I'm looking to change this as soon as possible.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default port_work;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Slideshow from './reactComponents/slideShow/portfolio-slideshow';\nimport WorkExp from './reactComponents/experienceWorkEdu/portfolio-workExp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Slideshow />, document.getElementById('content-protfolio'));\nReactDOM.render(<WorkExp />, document.getElementById('content-workexperience'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
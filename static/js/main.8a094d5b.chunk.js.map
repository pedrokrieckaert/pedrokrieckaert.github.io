{"version":3,"sources":["reactComponents/slideShow/slide-modal/bull.js","reactComponents/globalComponents/liArray.js","reactComponents/slideShow/slide-modal/modal-slideshow.js","reactComponents/slideShow/portfolio-slideshow.js","reactComponents/experienceWorkEdu/portfolio-workExp.js","serviceWorker.js","index.js"],"names":["Bull","handleClick","props","onClick","index","className","this","isActive","React","Component","Modal","setAppElement","ModalSlideshow","state","modalIsOpen","openModal","bind","afterOpenModal","closeModal","setState","subtitle","style","color","followProj","projData","link","href","target","isOpen","onAfterOpen","clearTimer","onRequestClose","onAfterClose","startTimer","ModalStyle","contentLabel","overlayClassName","ref","name","Array","from","length","skills","_","key","src","image","alt","detaildesc","split","map","item","Slideshow","changeSlide","id","idMax","activeIndex","prev","navBullClick","clearInterval","intervalId","setInterval","navPrevSlide","navNextSlide","projects","fetch","then","response","json","responseJson","desc","port_work","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a094d5b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Bull extends React.Component {\r\n    handleClick = () => this.props.onClick(this.props.index)\r\n\r\n    render(){\r\n        return(\r\n            <span className = {this.props.isActive ? 'active' : 'inActive'} onClick = {this.handleClick}>\r\n                &bull;\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Bull;\r\n","import React from 'react';\r\n\r\nclass LiArray extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <ul className = {this.props.class}>\r\n            {Array.from({\r\n                length: this.props.list},\r\n                (_, index) => (\r\n                    <li key = {index}>&bull; {this.props.list[index]}</li>\r\n                )\r\n            )}\r\n        </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LiArray;","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport ModalStyle from './modal-slideshow.css';\r\nimport LiArray from '../../globalComponents/liArray';\r\n \r\nModal.setAppElement('body');\r\n\r\n\r\nclass ModalSlideshow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n \r\n    this.state = {\r\n      modalIsOpen: false\r\n    };\r\n \r\n    this.openModal = this.openModal.bind(this);\r\n    this.afterOpenModal = this.afterOpenModal.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n  }\r\n \r\n  openModal() {\r\n    this.setState({\r\n        modalIsOpen: true,\r\n    });\r\n  }\r\n \r\n  afterOpenModal() {\r\n    this.subtitle.style.color = '#f00';\r\n  }\r\n \r\n  closeModal() {\r\n    this.setState({modalIsOpen: false});\r\n  }\r\n \r\n  render() {\r\n      let followProj;\r\n\r\n      if(this.props.projData.link !== \"\"){\r\n          followProj = <a className = \"btn\" href = {this.props.projData.link} target = \"blank\">View this porject</a>;\r\n      }else{\r\n          followProj = null;\r\n      }\r\n    return (\r\n      <div  className = \"modal-open\">\r\n        <button className = \"btn modal-open\" onClick={this.openModal}>Read More</button>\r\n        <Modal\r\n          isOpen={this.state.modalIsOpen}\r\n          onAfterOpen={this.props.clearTimer}\r\n          onRequestClose={this.closeModal}\r\n          onAfterClose={this.props.startTimer}\r\n          style={ModalStyle}\r\n          contentLabel=\"Projects Details\"\r\n          className = \"modal-body\"\r\n          overlayClassName = \"modal-overlay\"\r\n        >\r\n        <div className = \"modal-content-grid\">\r\n          <h2 className = \"modal-head\" ref={subtitle => this.subtitle = subtitle}>{this.props.projData.name}</h2>\r\n          <ul className = \"modal-skill\">\r\n                            {Array.from({\r\n                                length: this.props.projData.skills.length},\r\n                                (_, index) => (\r\n                                    <li key = {index}>&bull; {this.props.projData.skills[index]}</li>\r\n                                )\r\n                            )}\r\n                        </ul>\r\n          <img className = \"modal-img\" src = {this.props.projData.image.src} alt = {this.props.projData.image.alt}></img>\r\n          <p className = \"modal-text\">{this.props.projData.detaildesc.split('\\n').map(function(item, key) {\r\n            return (\r\n              <span key={key}>\r\n                &emsp;\r\n                {item}\r\n                <br/>\r\n                <br/>\r\n              </span>\r\n            )\r\n           })}\r\n          </p>\r\n          <div>{followProj}</div>\r\n          <button className = \"btn modal-close\" onClick={this.closeModal}>Close</button>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default ModalSlideshow;","import React from 'react';\r\nimport './port-slide.css';\r\nimport Bull from './slide-modal/bull';\r\nimport ModalSlideshow from './slide-modal/modal-slideshow';\r\n\r\nclass Slideshow extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            projects: [{\"name\": \"temp project\",\r\n            \"image\": {\r\n                \"src\": \"imgs/testImg.jpg\",\r\n                \"alt\": \"temp Image 1\"},\r\n            \"desc\": \"Lorem Ipsum\",\r\n            \"skills\":[\"temp 1\", \"temp 2\", \"temp 3\"],\r\n            \"detaildesc\":\"temp\"}],\r\n            id: 0,\r\n            idMax: null,\r\n            intervalId: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('data/slideShow.json')\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((responseJson) => {\r\n                this.setState({\r\n                    projects: responseJson.projects,\r\n                    idMax: responseJson.projects.length,\r\n                    activeIndex: 0\r\n                });\r\n            });\r\n\r\n\r\n            var intervalId = setInterval(this.changeSlide, 10000);\r\n            this.setState({intervalId: intervalId});\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.state.intervalId);\r\n    }\r\n\r\n    //Slideshow auto present\r\n    changeSlide = () => {\r\n        if (this.state.id === this.state.idMax - 1){\r\n            this.setState({id: 0});\r\n            this.setState({activeIndex: 0})\r\n        } else {\r\n            this.setState(prev => {\r\n                return {\r\n                    id: prev.id + 1,\r\n                    activeIndex: prev.activeIndex + 1\r\n                };\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    //Slideshow Navigation\r\n    navBullClick = (index) => {\r\n        this.setState({\r\n            activeIndex: index,\r\n            id: index\r\n        });\r\n\r\n        //Reset auto show timer\r\n        clearInterval(this.state.intervalId);\r\n        var intervalId = setInterval(this.changeSlide, 10000);\r\n        this.setState({intervalId: intervalId});\r\n    }\r\n\r\n    navPrevSlide = () => {\r\n        if(this.state.id === 0){\r\n            this.setState({\r\n                id: this.state.idMax - 1,\r\n                activeIndex: this.state.idMax - 1\r\n            })\r\n        }else{\r\n            this.setState(prev =>{\r\n                return{\r\n                    id: prev.id - 1,\r\n                    activeIndex: prev.activeIndex -1\r\n                };\r\n            });\r\n        }\r\n\r\n        //Reset auto show timer\r\n        clearInterval(this.state.intervalId);\r\n        var intervalId = setInterval(this.changeSlide, 10000);\r\n        this.setState({intervalId: intervalId});\r\n    }\r\n\r\n    navNextSlide = () => {\r\n        if(this.state.id === this.state.idMax - 1){\r\n            this.setState({\r\n                id: 0,\r\n                activeIndex: 0\r\n            })\r\n        }else{\r\n            this.setState(prev =>{\r\n                return{\r\n                    id: prev.id + 1,\r\n                    activeIndex: prev.activeIndex + 1\r\n                };\r\n            });\r\n        }\r\n\r\n        //Reset auto show timer\r\n        clearInterval(this.state.intervalId);\r\n        var intervalId = setInterval(this.changeSlide, 10000);\r\n        this.setState({intervalId: intervalId});\r\n    }\r\n\r\n    //Handles the slideshow timer for modal content\r\n    clearTimer = () => {\r\n        clearInterval(this.state.intervalId);\r\n    }\r\n\r\n    startTimer = () =>{\r\n        var intervalId = setInterval(this.changeSlide, 10000);\r\n        this.setState({intervalId: intervalId}); \r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div className=\"content-grid\">\r\n                    <div className = \"content-head\">\r\n                        <h3>Portfolio</h3>\r\n                    </div>\r\n                    <div className = \"content-slide\">\r\n                    <img className = \"slide-img\" id = \"proj1-img\" alt = {this.state.projects[this.state.id].image.alt} src = {this.state.projects[this.state.id].image.src}></img>\r\n                        <h3 className = \"slide-head\">{this.state.projects[this.state.id].name}</h3>\r\n                        <p className = \"slide-desc\">{this.state.projects[this.state.id].desc}</p>\r\n                        <ModalSlideshow projData = {this.state.projects[this.state.id]} clearTimer = {this.clearTimer} startTimer = {this.startTimer}/>\r\n                        <ul className = \"slide-skill\">\r\n                            {Array.from({\r\n                                length: this.state.projects[this.state.id].skills.length},\r\n                                (_, index) => (\r\n                                    <li key = {index}>&bull; {this.state.projects[this.state.id].skills[index]}</li>\r\n                                )\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                    <div className = \"content-nav\">\r\n                        <span onClick = {this.navPrevSlide}>&#9664;</span>\r\n                        {Array.from({\r\n                            length: this.state.idMax},\r\n                            (_, index) => (\r\n                                <Bull index = {index} key = {index} isActive = {this.state.activeIndex === index} onClick = {this.navBullClick}/>\r\n                            )\r\n                        )}\r\n                        <span onClick = {this.navNextSlide}>&#9654;</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default Slideshow;","import React from 'react';\r\nimport './expWorkEdu.css'\r\n\r\nfunction port_work(){\r\n    return (\r\n            <div>\r\n                <div className = \"content-head\">\r\n                    <h3>Experience</h3>\r\n                </div>\r\n                <div className = \"content-exp\">\r\n                    <div className = \"edu-container\">\r\n                        <h3 className = \"edu-head\">Education</h3>\r\n                        <p>Post Elementary Schooling, International Baccalaureate (IB) program</p>\r\n                        <ul className = \"edu-list\"> \r\n                            <li>2009-2012: Mont Kiara International School, Kuala Lumpur, Malaysia</li>\r\n                            <li>2012-2015: Stonehill International School, Bangalore, India</li>\r\n                            <li>2015 - 2017: International School of The Hague, Netherlands</li>\r\n                            <li>2018 - 2019: Hanze University of Applied Sciences, Groningen, Netherlands</li>\r\n                            <li>2019 - present: The Hague University of Applied Sciences, The Hague, Netherlands</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className = \"work-container\">\r\n                        <h3 className = \"work-head\">Work Experience</h3>\r\n                        <p className = \"work-list\">None so far, I'm looking to change this as soon as possible.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default port_work;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Slideshow from './reactComponents/slideShow/portfolio-slideshow';\nimport WorkExp from './reactComponents/experienceWorkEdu/portfolio-workExp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Slideshow />, document.getElementById('content-protfolio'));\nReactDOM.render(<WorkExp />, document.getElementById('content-workexperience'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
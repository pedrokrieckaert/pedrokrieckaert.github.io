{"version":3,"sources":["reactComponents/slideShow/slide-modal/bull.js","reactComponents/globalComponents/liArray.js","reactComponents/slideShow/slide-modal/modal-slideshow.js","reactComponents/slideShow/slide.js","reactComponents/slideShow/portfolio-slideshow.js","reactComponents/experienceWorkEdu/portfolio-workExp.js","serviceWorker.js","index.js"],"names":["Bull","handleClick","props","onClick","index","animCircle","offset","this","timeRemain","isActive","className","cx","cy","r","fill","stroke","strokeDasharray","strokeDashoffset","transform","width","height","React","Component","LiArray","class","Array","from","length","list","_","key","Modal","setAppElement","ModalSlideshow","state","modalIsOpen","openModal","bind","afterOpenModal","closeModal","setState","subtitle","style","color","followProj","projData","link","href","target","isOpen","onAfterOpen","clearTimer","onRequestClose","onAfterClose","startTimer","ModalStyle","contentLabel","overlayClassName","ref","name","skills","src","image","alt","detaildesc","split","map","item","memo","position","transition","Slideshow","timestamp","Date","getTime","duration","timerStep","start","intervalStart","requestAnimationFrame","setSlideState","slide1","slide2","id","activeIndex","prepOffSlide","reverse","s","styles","onScreen","offScreenPrev","offScreenNext","resetTransition","setTimeout","changeSlide","updateId","slides","idMax","navBullClick","noSwitch","resetTimer","navPrevSlide","max","navNextSlide","clearInterval","intervalId","cancelAnimationFrame","setInterval","projects","fetch","then","response","json","responseJson","catch","error","console","log","slideshowDisplay","currentProject","S1Project","S2Project","desc","window","innerWidth","port_work","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1ea7b59.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bull.scss'\r\n\r\nclass Bull extends React.Component {\r\n    handleClick = () => this.props.onClick(this.props.index);\r\n\r\n    render(){\r\n        var offset = (this.props.timeRemain/ (10000/134));\r\n\r\n        let animCircle;\r\n\r\n        if(this.props.isActive){\r\n            animCircle = <circle className = \"nav-bullet--stroke\" cx=\"20\" cy=\"20\" r=\"18\" fill=\"none\" stroke=\"#f77a52\" strokeDasharray=\"134\" strokeDashoffset = {20 + offset} transform= \"rotate(-90, 20,20)\"></circle>\r\n        }\r\n\r\n        return(\r\n            <svg className = {this.props.isActive ? 'bull--active' : 'bull--inactive'} onClick = {this.handleClick} width=\"40\" height=\"40\">\r\n\t\t        <circle className = \"nav-bullet--inner\" cx=\"20\" cy=\"20\" r=\"18\" stroke=\"#e6e6e6\" ></circle>\r\n\t\t        {animCircle}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Bull;\r\n","import React from 'react';\r\n\r\nclass LiArray extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n        <ul className = {this.props.class}>\r\n            {Array.from({\r\n                length: this.props.list.length},\r\n                (_, index) => (\r\n                    <li key = {index}>&bull; {this.props.list[index]}</li>\r\n                )\r\n            )}\r\n        </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LiArray;","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport ModalStyle from './modal-slideshow.scss';\r\nimport LiArray from '../../globalComponents/liArray';\r\n \r\nModal.setAppElement('body');\r\n\r\n\r\nclass ModalSlideshow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n \r\n    this.state = {\r\n      modalIsOpen: false\r\n    };\r\n \r\n    this.openModal = this.openModal.bind(this);\r\n    this.afterOpenModal = this.afterOpenModal.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n  }\r\n \r\n  openModal() {\r\n    this.setState({\r\n        modalIsOpen: true,\r\n    });\r\n  }\r\n \r\n  afterOpenModal() {\r\n    this.subtitle.style.color = '#f00';\r\n  }\r\n \r\n  closeModal() {\r\n    this.setState({modalIsOpen: false});\r\n  }\r\n \r\n  render() {\r\n      let followProj;\r\n\r\n      if(this.props.projData.link !== null){\r\n          followProj = <a className = \"btn\" href = {this.props.projData.link} target = \"blank\">View this porject</a>;\r\n      }else{\r\n          followProj = null;\r\n      }\r\n    return (\r\n      <div  className = \"modal-open\">\r\n        <button className = \"btn modal-open\" onClick={this.openModal}>Read More</button>\r\n        <Modal\r\n          isOpen={this.state.modalIsOpen}\r\n          onAfterOpen={this.props.clearTimer}\r\n          onRequestClose={this.closeModal}\r\n          onAfterClose={this.props.startTimer}\r\n          style={ModalStyle}\r\n          contentLabel=\"Projects Details\"\r\n          className = \"modal-body\"\r\n          overlayClassName = \"modal-overlay\"\r\n        >\r\n        <div className = \"modal-content-grid\">\r\n          <h2 className = \"modal-head\" ref={subtitle => this.subtitle = subtitle}>{this.props.projData.name}</h2>\r\n          <LiArray class = \"modal-skill\" list = {this.props.projData.skills}></LiArray>\r\n          <img className = \"modal-img\" src = {this.props.projData.image.src} alt = {this.props.projData.image.alt}></img>\r\n          <p className = \"modal-text\">{this.props.projData.detaildesc.split('\\n').map(function(item, key) {\r\n            return (\r\n              <span key={key}>\r\n                &emsp;\r\n                {item}\r\n                <br/>\r\n                <br/>\r\n              </span>\r\n            )\r\n           })}\r\n          </p>\r\n          <div>{followProj}</div>\r\n          <button className = \"btn modal-close\" onClick={this.closeModal}>Close</button>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default ModalSlideshow;","import React, { memo } from \"react\";\r\nimport \"./slide.scss\";\r\n\r\nconst Slide = ({position, transition, src, alt}) => {\r\n    return(\r\n        <div className = {position + \" \" + transition + \" img-container\"}>\r\n            <img src = {src} alt = {alt} className = \"slide\"></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Slide);","import React from 'react';\r\nimport './portfolio-slideshow.scss';\r\nimport Bull from './slide-modal/bull';\r\nimport ModalSlideshow from './slide-modal/modal-slideshow';\r\nimport LiArray from '../globalComponents/liArray';\r\nimport Slide from './slide';\r\n//import Media from '../globalComponents/media';\r\n\r\nclass Slideshow extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            projects: [{\"name\": \"temp project\",\r\n            \"image\": {\r\n                \"src\": \"imgs/testImg.jpg\",\r\n                \"alt\": \"temp Image 1\"},\r\n            \"desc\": \"Lorem Ipsum\",\r\n            \"skills\":[\"temp 1\", \"temp 2\", \"temp 3\"],\r\n            \"detaildesc\":\"temp\"}],\r\n            id: 0,\r\n            idMax: null,\r\n            slide1: {\r\n                id: 0,\r\n                position: \"left-cur\",\r\n                transition: true\r\n            },\r\n            slide2: {\r\n                id: 1,\r\n                position: \"left-next\",\r\n                transition: true\r\n            },\r\n            styles: {\r\n                onScreen: \"left-cur\",\r\n                offScreenNext: \"left-next\",\r\n                offScreenPrev: \"left-prev\",\r\n                transition: \"transition-left1\"\r\n            },\r\n\r\n            intervalId: null,\r\n            intervalStart: null,\r\n            timerStep: 10000,\r\n            timeRemain: null\r\n        }\r\n    }\r\n\r\n    //Aquire slideshow content when the component is active\r\n    componentDidMount() {\r\n        fetch('https://pedrokrieckaert.github.io/data/slideShow.json')\r\n        //fetch('./data/slideShow.json')\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((responseJson) => {\r\n                this.setState({\r\n                    projects: responseJson.projects,\r\n                    idMax: responseJson.projects.length,\r\n                    activeIndex: 0\r\n                });\r\n                requestAnimationFrame(() =>{\r\n                    this.startTimer();\r\n                    this.timeRemain();\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log('Error; ', error);\r\n            });\r\n    }\r\n\r\n    //Clean up timers when the component is being used anymore\r\n    componentWillUnmount(){\r\n        this.clearTimer();\r\n    }\r\n\r\n    //Calculates the remaining time for the nav bullet animation\r\n    //the value is passed per available animation frame\r\n    timeRemain = (timestamp) => {\r\n        timestamp = timestamp || new Date().getTime();\r\n        var duration = this.state.timerStep;\r\n        var start = this.state.intervalStart;\r\n        var runtime = timestamp - start;\r\n\r\n        if (runtime < duration){\r\n            requestAnimationFrame( (timestamp) =>{\r\n                this.timeRemain(timestamp);\r\n            });\r\n        }\r\n        requestAnimationFrame(() =>{\r\n            this.setState({\r\n                timeRemain: duration - ( (new Date().getTime() - start))\r\n            });\r\n        });\r\n    }\r\n\r\n    //Updates the state variables with the mutated constants\r\n    //Reverse for any function requiring a reversed animation\r\n    setSlideState = (slide1, slide2, id) =>{\r\n        this.setState({\r\n            slide1: slide1,\r\n            slide2: slide2,\r\n            id: id,\r\n            activeIndex: id\r\n        });\r\n    }\r\n\r\n    //Sets the slide offscreen slide to the appropiate location for the next animation\r\n    //Example: If the previous slide is called, the function places the off screen slide on the left\r\n    //Timeout is used to give time for a function to complete all it's actions\r\n    prepOffSlide = (reverse) =>{\r\n        const s = this.state.styles,\r\n        slide1 = this.state.slide1,\r\n        slide2 = this.state.slide2,\r\n        id = this.state.id;\r\n\r\n        if(slide1[\"position\"] !== s.onScreen){\r\n            if (reverse) {\r\n                slide1[\"position\"] = s.offScreenPrev;\r\n            } else {\r\n                slide1[\"position\"] = s.offScreenNext;\r\n            }\r\n            slide1[\"transition\"] = false;\r\n        } else {\r\n            if (reverse) {\r\n                slide2[\"position\"] = s.offScreenPrev;\r\n            } else {\r\n                slide2[\"position\"] = s.offScreenNext;\r\n            }\r\n            slide2[\"transition\"] = false;\r\n        }\r\n\r\n        \r\n        this.setSlideState(slide1, slide2, id);\r\n        this.resetTransition(slide1, slide2, id)\r\n\r\n        setTimeout(() => {\r\n            this.changeSlide(reverse);\r\n        }, 500);\r\n    }\r\n\r\n    //Rests the transistion boolean after the clean up,\r\n    //Covers both slides, updates the state variables with the new boolean\r\n    //Timeout is to give time for all the changes to occur\r\n    resetTransition = (slide1, slide2, id) =>{\r\n        setTimeout(() => {\r\n            slide1[\"transition\"] = true;\r\n            slide2[\"transition\"] = true;\r\n            this.setSlideState(slide1, slide2, id);\r\n        }, 500);\r\n    }\r\n\r\n    //Slideshow slide animator\r\n    //First the \"reverse\" parameter is used to determine if the slide has to go back, the animation is reversed\r\n    //Based on the active screen, css styles of the local variables are changed, these changes are passed to the state variable through another function\r\n    //The active ID is altered to be that of the next slide\r\n    changeSlide = (reverse) => {\r\n        const slide1 = this.state.slide1,\r\n            slide2 = this.state.slide2,\r\n            s = this.state.styles;\r\n        let id;\r\n\r\n\r\n        if(reverse === true){\r\n            if (slide1[\"position\"] === s.onScreen){\r\n                slide1[\"position\"] = s.offScreenNext;\r\n                slide2[\"position\"] = s.onScreen;\r\n                id = slide2.id;\r\n            } else {\r\n                slide1['position'] = s.onScreen;\r\n                slide2['position'] = s.offScreenNext;\r\n                id = slide1.id;\r\n            }\r\n        } else{\r\n            if (slide1[\"position\"] === s.onScreen){\r\n                slide1[\"position\"] = s.offScreenPrev;\r\n                slide2[\"position\"] = s.onScreen;\r\n                id = slide2.id;\r\n            } else {\r\n                slide1['position'] = s.onScreen;\r\n                slide2['position'] = s.offScreenPrev;\r\n                id = slide1.id;\r\n            }\r\n        }\r\n\r\n        this.setSlideState(slide1, slide2, id);\r\n\r\n        setTimeout(() => {\r\n            this.updateId();\r\n        }, 1000);\r\n\r\n        this.setState({intervalStart: (new Date()).getTime()});\r\n    }\r\n\r\n    //Changes the ID of the off screen slide to be the upcoming ID\r\n    updateId = () => {\r\n        const slide1 = this.state.slide1,\r\n            slide2 = this.state.slide2,\r\n            s = this.state.styles,\r\n            slides = this.state.idMax,\r\n            id = this.state.id;\r\n\r\n            if (slide1[\"position\"] !== s.onScreen) {\r\n                slide1[\"id\"] = slide2.id + 1 === slides ? 0 : slide2.id + 1;\r\n            } else {\r\n                slide2[\"id\"] = slide1.id + 1 === slides ? 0 : slide1.id + 1;\r\n            }\r\n\r\n            this.setSlideState(slide1, slide2, id);\r\n    }\r\n\r\n    //Slideshow Bullet Navigation\r\n    navBullClick = (index) => {\r\n        const slide1 = this.state.slide1,\r\n            slide2 = this.state.slide2,\r\n            s = this.state.styles;\r\n\r\n        var reverse = false,\r\n        noSwitch = false;\r\n\r\n        if (slide1[\"position\"] === s.onScreen && index !== slide1.id){\r\n            if(index < slide2.id){\r\n                reverse = true;\r\n            }\r\n            slide2.id = index;\r\n        } else  if (slide2[\"position\"] === s.onScreen && index !== slide2.id){\r\n            if(index < slide1.id){\r\n                reverse = true;\r\n            }\r\n            slide1.id = index;\r\n        } else {\r\n            noSwitch = true;\r\n        }\r\n\r\n        //Conditional to prevent animation if the same slide is selected\r\n        if(noSwitch === false){\r\n            //Updates the component state variables\r\n            this.setSlideState(slide1, slide2, index);\r\n\r\n            //Preps slides for animation\r\n            this.prepOffSlide(reverse);\r\n\r\n            //Reset auto show timer\r\n            this.resetTimer();\r\n        }\r\n    }\r\n\r\n    //Go to previous slide in the order, ID is updated\r\n    navPrevSlide = () => {\r\n        const slide1 = this.state.slide1,\r\n            slide2 = this.state.slide2,\r\n            s = this.state.styles,\r\n            max = this.state.idMax;\r\n        var id = this.state.id;\r\n\r\n        if(id === 0){\r\n            id = max - 1;\r\n        }else{\r\n            id = id -1;\r\n        }\r\n\r\n        if (slide1[\"position\"] === s.onScreen){\r\n            slide2.id = id;\r\n        } else {\r\n            slide1.id = id;\r\n        }\r\n\r\n        //Updates the component state variables\r\n        this.setSlideState(slide1, slide2, id);\r\n\r\n        //Handles the slide animation and clean up\r\n        this.prepOffSlide(true);\r\n\r\n        //Reset auto show timer\r\n        this.resetTimer();\r\n    }\r\n\r\n    //Go to the next slide in the order, ID is updated\r\n    navNextSlide = () => {\r\n        const slide1 = this.state.slide1,\r\n            slide2 = this.state.slide2,\r\n            s = this.state.styles,\r\n            max = this.state.idMax;\r\n        var id = this.state.id;\r\n\r\n        if(id === (max - 1)){\r\n            id = 0;\r\n        }else{\r\n            id = id +1;\r\n        }\r\n\r\n        if (slide1[\"position\"] === s.onScreen){\r\n            slide2.id = id;\r\n        } else {\r\n            slide1.id = id;\r\n        }\r\n\r\n        //Updates the component state variables\r\n        this.setSlideState(slide1, slide2, id);\r\n\r\n        //Handles the slide animation and clean up\r\n        this.prepOffSlide(false);\r\n\r\n        //Reset auto show timer\r\n        this.resetTimer();\r\n    }\r\n\r\n    //Clears all timers and intervals\r\n    clearTimer = () => {\r\n        clearInterval(this.state.intervalId);\r\n        cancelAnimationFrame(() =>{\r\n            this.startTimer();\r\n            this.timeRemain();  \r\n        });\r\n    }\r\n\r\n    //Starts all timers and intervals, along with other time based variables\r\n    startTimer = () =>{\r\n        var intervalId = setInterval(this.prepOffSlide, this.state.timerStep);\r\n        this.setState({intervalStart: (new Date()).getTime()});\r\n        this.setState({intervalId: intervalId}); \r\n    }\r\n\r\n    //Resets all timers and intervals, used when the user overides the slideshow timer with navigation inputs\r\n    resetTimer = () =>{\r\n        clearInterval(this.state.intervalId);\r\n        var intervalId = setInterval(this.prepOffSlide, this.state.timerStep);\r\n        this.setState({intervalStart: (new Date()).getTime()});\r\n        this.setState({intervalId: intervalId});\r\n    }\r\n\r\n\r\n    render() {\r\n        const \r\n            currentProject = this.state.projects[this.state.id],\r\n            s = this.state.styles,\r\n            slide1 = this.state.slide1,\r\n            slide2 = this.state.slide2;\r\n\r\n        var \r\n            S1Project = this.state.projects[slide1.id],\r\n            S2Project = this.state.projects[slide2.id];\r\n            \r\n\r\n        let slideshowDisplay;\r\n\r\n        //Conditional logic to prevent rendering of ellements dependant on the fetched data\r\n        if (this.state.idMax !== null){\r\n\r\n            slideshowDisplay =\r\n            <div>\r\n                <div className = \"content-navOverlay\">\r\n                    <div className = \"slideshow-container\">\r\n\r\n                    <Slide \r\n                    alt = {S1Project.image.alt}\r\n                    src = {S1Project.image.src}\r\n                    position = {slide1.position}\r\n                    transition = {slide1.transition ? s.transition : \"none\"}\r\n                    />\r\n\r\n                    <Slide\r\n                    alt = {S2Project.image.alt}\r\n                    src = {S2Project.image.src}\r\n                    position = {slide2.position}\r\n                    transition = {slide2.transition ? s.transition : \"none\"}\r\n                    />\r\n                        \r\n                        <div className = \"slide-textOverlay\">\r\n                            <h2 className = \"slide-head\">{currentProject.name}</h2>\r\n                            <LiArray class = \"slide-text--skill\" list = {currentProject.skills}></LiArray>\r\n                            <p className = \"slide-text--desc\">{currentProject.desc}</p>\r\n                            <ModalSlideshow projData = {currentProject} clearTimer = {this.clearTimer} startTimer = {this.startTimer}/>\r\n                        </div>\r\n                    </div>\r\n                        <img src = \"./imgs/globalMedia/next.svg\" alt = \"next/prev button\" className = \"nav-btn--next\" onClick = {this.navNextSlide}></img>\r\n                        <img src = \"./imgs/globalMedia/next.svg\" alt = \"next/prev button\" className = \"nav-btn--prev\" onClick = {this.navPrevSlide}></img>\r\n                    </div>\r\n                    <div className = \"content-nav\">\r\n                        {Array.from({\r\n                            length: this.state.idMax},\r\n                            (_, index) => (\r\n                                <Bull index = {index} key = {index} isActive = {this.state.activeIndex === index} onClick = {this.navBullClick} timeRemain = {this.state.timeRemain}/>\r\n                            )\r\n                        )}\r\n                    </div>\r\n                </div>;\r\n        } else {\r\n            slideshowDisplay = \r\n            <div>\r\n                <h2>There was an error while loading.</h2>\r\n            </div>;\r\n        } \r\n\r\n        return(\r\n            <div style = {{width: window.innerWidth - 16.4 + ' px'}}>\r\n                <h2 className = \"content-head\">Portfolio</h2>\r\n                {slideshowDisplay}\r\n            </div>\r\n\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default Slideshow;","import React from 'react';\r\nimport './experience.scss'\r\n\r\nfunction port_work(){\r\n    return (\r\n            <div>\r\n                <div className = \"content-exp\">\r\n                    <div className = \"edu-container\">\r\n                        <h2 className = \"edu-head\">Education</h2>\r\n                        <p>Post Elementary Schooling, International Baccalaureate (IB) program</p>\r\n                        <ul className = \"edu-list\"> \r\n                            <li>2009-2012: Mont Kiara International School, Kuala Lumpur, Malaysia</li>\r\n                            <li>2012-2015: Stonehill International School, Bangalore, India</li>\r\n                            <li>2015 - 2017: International School of The Hague, Netherlands</li>\r\n                            <li>2018 - 2019: Hanze University of Applied Sciences, Groningen, Netherlands</li>\r\n                            <li>2019 - present: The Hague University of Applied Sciences, The Hague, Netherlands</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default port_work;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Slideshow from './reactComponents/slideShow/portfolio-slideshow';\nimport WorkExp from './reactComponents/experienceWorkEdu/portfolio-workExp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Slideshow />, document.getElementById('content-protfolio'));\nReactDOM.render(<WorkExp />, document.getElementById('content-workexperience'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}